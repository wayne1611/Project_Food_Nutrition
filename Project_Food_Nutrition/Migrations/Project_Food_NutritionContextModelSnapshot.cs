// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project_Food_Nutrition.Data;

#nullable disable

namespace Project_Food_Nutrition.Migrations
{
    [DbContext(typeof(Project_Food_NutritionContext))]
    partial class Project_Food_NutritionContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Project_Food_Nutrition.Data.Project_Food_NutritionUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Project_Food_Nutrition.Domain.Calorie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CaloriesCount")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserName")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Calorie");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CaloriesCount = 750,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9256),
                            DateUpdated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9270),
                            Name = "Chicken Salad",
                            UpdatedBy = "System",
                            UserName = 0
                        },
                        new
                        {
                            Id = 2,
                            CaloriesCount = 400,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9273),
                            DateUpdated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9274),
                            Name = "Grilled Chicken Sandwich",
                            UpdatedBy = "System",
                            UserName = 0
                        },
                        new
                        {
                            Id = 3,
                            CaloriesCount = 250,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9276),
                            DateUpdated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9276),
                            Name = "Avocado Toast with egg ",
                            UpdatedBy = "System",
                            UserName = 0
                        },
                        new
                        {
                            Id = 4,
                            CaloriesCount = 600,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9306),
                            DateUpdated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9306),
                            Name = "Spaghetti Bolognese (1 plate)",
                            UpdatedBy = "System",
                            UserName = 0
                        },
                        new
                        {
                            Id = 5,
                            CaloriesCount = 450,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9308),
                            DateUpdated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9308),
                            Name = "Grilled salmon with quinoa and vegetables (1 plate)",
                            UpdatedBy = "System",
                            UserName = 0
                        },
                        new
                        {
                            Id = 6,
                            CaloriesCount = 200,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9310),
                            DateUpdated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9310),
                            Name = "Apple slices with peanut butter (1 serving)",
                            UpdatedBy = "System",
                            UserName = 0
                        },
                        new
                        {
                            Id = 7,
                            CaloriesCount = 100,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9312),
                            DateUpdated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9312),
                            Name = "Chocolate chip cookies (1 cookie)",
                            UpdatedBy = "System",
                            UserName = 0
                        });
                });

            modelBuilder.Entity("Project_Food_Nutrition.Domain.CalorieProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("TargetCalories")
                        .HasColumnType("int");

                    b.Property<int>("TotalCalories")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CalorieProgress");
                });

            modelBuilder.Entity("Project_Food_Nutrition.Domain.LoggedCalorie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CaloriesCount")
                        .HasColumnType("int");

                    b.Property<int>("MealId")
                        .HasColumnType("int");

                    b.Property<string>("MealName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LoggedCalories");
                });

            modelBuilder.Entity("Project_Food_Nutrition.Domain.Macros", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HealthBenefits")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("Macros");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9604),
                            DateUpdated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9605),
                            Description = "165 calories.\r\n3.6 g of cholesterol.\r\n31 g of protein.\r\n3.6 g of fat.\r\n0 g of carbohydrate.\r\n0 g of dietary fiber.\r\n0 g of total sugars.\r\n",
                            HealthBenefits = "High in protein, promotes muscle growth and repair.",
                            Name = "Chicken Breast"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9607),
                            DateUpdated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9607),
                            Description = "242 calories.\r\n78 mg of cholesterol.\r\n22.8 g of protein.\r\n16.3 g of fat.\r\n0 g of carbohydrate.\r\n0 g of dietary fiber.\r\n0 g of total sugars.\r\n",
                            HealthBenefits = "Rich in iron, supports healthy blood circulation.",
                            Name = "Beef Steak"
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9608),
                            DateUpdated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9609),
                            Description = "206 calories.\r\n63 mg of cholesterol.\r\n22.1 g of protein.\r\n12.4 g of fat.\r\n0 g of carbohydrate.\r\n0 g of dietary fiber.\r\n0 g of total sugars.\r\n",
                            HealthBenefits = "Rich in omega-3 fatty acids, supports brain health.",
                            Name = "Salmon"
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9610),
                            DateUpdated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9611),
                            Description = "143 calories.\r\n62 mg of cholesterol.\r\n26.5 g of protein.\r\n3.7 g of fat.\r\n0 g of carbohydrate.\r\n0 g of dietary fiber.\r\n0 g of total sugars.\r\n",
                            HealthBenefits = "Good source of B-vitamins, helps in energy production.",
                            Name = "Pork Tenderloin"
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9612),
                            DateUpdated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9612),
                            Description = "99 calories.\r\n0 mg of cholesterol.\r\n0.82 g of protein.\r\n0.38 g of fat.\r\n24.7 g of carbohydrate.\r\n2.6 g of dietary fiber.\r\n46.5 g of total sugars.\r\n",
                            HealthBenefits = "High in vitamin C, boosts immune function.",
                            Name = "Mango"
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9614),
                            DateUpdated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9614),
                            Description = "105 calories.\r\n0 mg of cholesterol.\r\n1.3 g of protein.\r\n0.3 g of fat.\r\n27 g of carbohydrate.\r\n3.1 g of dietary fiber.\r\n14.4 g of total sugars.\r\n",
                            HealthBenefits = "High in potassium, supports heart health.",
                            Name = "Banana"
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9615),
                            DateUpdated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9616),
                            Description = "95 calories.\r\n0 mg of cholesterol.\r\n0.5 g of protein.\r\n0.3 g of fat.\r\n25 g of carbohydrate.\r\n4.4 g of dietary fiber.\r\n19 g of total sugars.\r\n",
                            HealthBenefits = "High in fiber, promotes digestive health.",
                            Name = "Apple"
                        },
                        new
                        {
                            Id = 9,
                            DateCreated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9617),
                            DateUpdated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9617),
                            Description = "62 calories.\r\n0 mg of cholesterol.\r\n1.2 g of protein.\r\n0.2 g of fat.\r\n15.4 g of carbohydrate.\r\n3.1 g of dietary fiber.\r\n12.2 g of total sugars.\r\n",
                            HealthBenefits = "Rich in vitamin C, supports immune system.",
                            Name = "Orange"
                        },
                        new
                        {
                            Id = 10,
                            DateCreated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9619),
                            DateUpdated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9619),
                            Description = "160 calories.\r\n0 mg of cholesterol.\r\n2 g of protein.\r\n15 g of fat.\r\n9 g of carbohydrate.\r\n7 g of dietary fiber.\r\n0.2 g of total sugars.\r\n",
                            HealthBenefits = "Rich in healthy fats, promotes heart health.",
                            Name = "Avocado"
                        },
                        new
                        {
                            Id = 11,
                            DateCreated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9620),
                            DateUpdated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9621),
                            Description = "32 calories.\r\n0 mg of cholesterol.\r\n0.7 g of protein.\r\n0.3 g of fat.\r\n7.7 g of carbohydrate.\r\n2 g of dietary fiber.\r\n4.9 g of total sugars.\r\n",
                            HealthBenefits = "Rich in antioxidants, supports skin health.",
                            Name = "Strawberries"
                        },
                        new
                        {
                            Id = 12,
                            DateCreated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9622),
                            DateUpdated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9623),
                            Description = "68 calories.\r\n186 mg of cholesterol.\r\n5.5 g of protein.\r\n4.8 g of fat.\r\n0.6 g of carbohydrate.\r\n0 g of dietary fiber.\r\n0.6 g of total sugars.\r\n",
                            HealthBenefits = "High in protein, supports muscle repair and immune function.",
                            Name = "Egg"
                        },
                        new
                        {
                            Id = 13,
                            DateCreated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9624),
                            DateUpdated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9624),
                            Description = "112 calories.\r\n0 mg of cholesterol.\r\n2.1 g of protein.\r\n0.1 g of fat.\r\n26.2 g of carbohydrate.\r\n3.9 g of dietary fiber.\r\n5.4 g of total sugars.\r\n",
                            HealthBenefits = "High in vitamin A, promotes healthy vision.",
                            Name = "Sweet Potato"
                        },
                        new
                        {
                            Id = 14,
                            DateCreated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9625),
                            DateUpdated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9626),
                            Description = "22 calories.\r\n0 mg of cholesterol.\r\n1.1 g of protein.\r\n0.2 g of fat.\r\n4.8 g of carbohydrate.\r\n1.5 g of dietary fiber.\r\n3.2 g of total sugars.\r\n",
                            HealthBenefits = "Rich in lycopene, supports heart health and reduces inflammation.",
                            Name = "Tomato"
                        },
                        new
                        {
                            Id = 15,
                            DateCreated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9627),
                            DateUpdated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9627),
                            Description = "41 calories.\r\n0 mg of cholesterol.\r\n0.9 g of protein.\r\n0.2 g of fat.\r\n9.6 g of carbohydrate.\r\n2.8 g of dietary fiber.\r\n4.7 g of total sugars.\r\n",
                            HealthBenefits = "High in vitamin A, supports healthy skin and vision.",
                            Name = "Carrot"
                        });
                });

            modelBuilder.Entity("Project_Food_Nutrition.Domain.MacrosTracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Calories")
                        .HasColumnType("float");

                    b.Property<double>("Carbohydrates")
                        .HasColumnType("float");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<double>("Fats")
                        .HasColumnType("float");

                    b.Property<double>("Protein")
                        .HasColumnType("float");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MacrosTracking");
                });

            modelBuilder.Entity("Project_Food_Nutrition.Domain.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ingredients")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Recipe");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9494),
                            DateUpdated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9495),
                            Ingredients = "Lettuce, Tomato, Cucumber, Olive Oil, Salt, Pepper",
                            Instructions = "1. Chop the lettuce, tomato, and cucumber.\n2. Mix the ingredients in a bowl.\n3. Add olive oil, salt, and pepper to taste.\n4. Toss and serve.",
                            Name = "Simple Salad",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9497),
                            DateUpdated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9497),
                            Ingredients = "Eggs, Butter, Salt, Pepper",
                            Instructions = "1. Crack the eggs into a bowl.\n2. Whisk with a fork.\n3. Heat butter in a pan.\n4. Pour in eggs and stir until cooked.\n5. Add salt and pepper to taste.",
                            Name = "Scrambled Eggs",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9499),
                            DateUpdated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9500),
                            Ingredients = "Spaghetti, Garlic, Olive Oil, Red Pepper Flakes, Parsley, Salt",
                            Instructions = "1. Boil pasta in salted water until al dente.\n2. In a pan, heat olive oil and sauté garlic until golden.\n3. Add red pepper flakes.\n4. Toss pasta with garlic and oil.\n5. Garnish with parsley and serve.",
                            Name = "Pasta Aglio e Olio",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9501),
                            DateUpdated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9502),
                            Ingredients = "Bread, Cheese, Butter",
                            Instructions = "1. Butter both sides of two slices of bread.\n2. Place cheese between the slices.\n3. Grill on medium heat until both sides are golden brown.",
                            Name = "Grilled Cheese Sandwich",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9503),
                            DateUpdated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9503),
                            Ingredients = "Tomatoes, Onion, Garlic, Olive Oil, Salt, Pepper, Water",
                            Instructions = "1. Sauté onion and garlic in olive oil.\n2. Add chopped tomatoes and cook until soft.\n3. Add water and simmer.\n4. Blend the soup and season with salt and pepper.",
                            Name = "Tomato Soup",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9505),
                            DateUpdated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9505),
                            Ingredients = "Banana, Strawberries, Milk, Honey",
                            Instructions = "1. Add all ingredients into a blender.\n2. Blend until smooth.\n3. Serve chilled.",
                            Name = "Fruit Smoothie",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9507),
                            DateUpdated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9507),
                            Ingredients = "Eggs, Milk, Salt, Pepper, Butter",
                            Instructions = "1. Whisk eggs with milk, salt, and pepper.\n2. Heat butter in a pan.\n3. Pour in the egg mixture and cook until set.\n4. Fold and serve.",
                            Name = "Omelette",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 8,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9509),
                            DateUpdated = new DateTime(2025, 2, 3, 10, 19, 57, 347, DateTimeKind.Local).AddTicks(9509),
                            Ingredients = "Chicken Breast, Bell Peppers, Soy Sauce, Garlic, Ginger",
                            Instructions = "1. Slice chicken and bell peppers.\n2. Stir-fry garlic and ginger in a pan.\n3. Add chicken and cook until browned.\n4. Add bell peppers and soy sauce, stir-fry until cooked.",
                            Name = "Chicken Stir-fry",
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("Project_Food_Nutrition.Domain.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("MacrosName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MacrosTrackingId")
                        .HasColumnType("int");

                    b.Property<int>("MacrosValue")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MacrosTrackingId");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("Project_Food_Nutrition.Domain.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CaloriesDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CaloriesTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrentCalories")
                        .HasColumnType("int");

                    b.Property<int>("DailyCaloriesRecommend")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserDietName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Project_Food_Nutrition.Data.Project_Food_NutritionUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Project_Food_Nutrition.Data.Project_Food_NutritionUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project_Food_Nutrition.Data.Project_Food_NutritionUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Project_Food_Nutrition.Data.Project_Food_NutritionUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project_Food_Nutrition.Domain.Calorie", b =>
                {
                    b.HasOne("Project_Food_Nutrition.Domain.Users", "User")
                        .WithMany("Calories")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project_Food_Nutrition.Domain.Macros", b =>
                {
                    b.HasOne("Project_Food_Nutrition.Domain.Recipe", "Recipe")
                        .WithMany("Macros")
                        .HasForeignKey("RecipeId");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Project_Food_Nutrition.Domain.Staff", b =>
                {
                    b.HasOne("Project_Food_Nutrition.Domain.Users", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project_Food_Nutrition.Domain.MacrosTracking", "MacrosTracking")
                        .WithMany()
                        .HasForeignKey("MacrosTrackingId");

                    b.Navigation("Customer");

                    b.Navigation("MacrosTracking");
                });

            modelBuilder.Entity("Project_Food_Nutrition.Domain.Users", b =>
                {
                    b.HasOne("Project_Food_Nutrition.Domain.Recipe", "Recipe")
                        .WithMany("Users")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Project_Food_Nutrition.Domain.Recipe", b =>
                {
                    b.Navigation("Macros");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Project_Food_Nutrition.Domain.Users", b =>
                {
                    b.Navigation("Calories");
                });
#pragma warning restore 612, 618
        }
    }
}
