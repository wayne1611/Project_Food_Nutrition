@page "/Caloriess"
@using Microsoft.EntityFrameworkCore
@using Project_Food_Nutrition.Data
@using Project_Food_Nutrition.Domain
@inject IDbContextFactory<Project_Food_Nutrition.Data.Project_Food_NutritionContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider authenticationStateProvider

@rendermode InteractiveServer

<PageTitle>Calories Tracker</PageTitle>

<h1>Calories Tracker Intake</h1>

<div class="container mt-4">
    <div class="card shadow-lg p-4 rounded" style="background: #f4f9f4; border-radius: 15px;">
        <h1 class="text-center text-success">Calories Tracker Intake</h1>
        <div class="d-flex justify-content-center gap-3 mt-3">
            <button class="btn btn-lg btn-success" @onclick="ShowInputField">➕ Add Calories</button>
            <button class="btn btn-lg btn-danger" @onclick="ShowDeletePopup">🗑️ Delete Logged Calories</button>
            <button class="btn btn-lg btn-warning text-dark" @onclick="ShowTargetPopup">🎯 Set Target Calories</button>
        </div>
    </div>
</div>

@if (targetCalories > 0)
{
    <div class="container mt-5">
        <div class="card shadow-lg p-4 rounded" style="background: #ffffff; border-radius: 15px;">
            <h2 class="text-center text-dark">Calories Overview</h2>

            <div class="card shadow-sm p-3 mb-3" style="background: #1a1a2e; border-radius: 15px; color: #e0e0e0;">
                <p class="text-center fs-4" role="status">Total Calories: <strong>@totalCalories</strong></p>
            </div>

            <canvas id="caloriesChart" width="200" height="200" class="mx-auto d-block"></canvas>

            <div class="scroll-panel mt-4 flex-grow-1" style="overflow-y: auto;">
                <ul class="logged-food-list" style="list-style-type: none; padding: 0;">
                    @foreach (var meal in LoggedCalories)
                    {
                        <li class="logged-food-item card shadow-sm mb-3 p-3" style="border-radius: 10px; display: flex; justify-content: space-between; align-items: center; background: #f9f9f9;">
                            <span class="food-name" style="font-weight: bold; color: #555;">@meal.MealName</span>
                            <span class="food-calories" style="color: #888;">@meal.CaloriesCount calories</span>
                        </li>
                    }
                </ul>
            </div>

            <div class="progress-container mt-4 p-2 rounded shadow" style="background: #eaf4ea;">
                <div class="progress" style="height: 35px; border-radius: 25px; overflow: hidden;">
                    <div class="progress-bar progress-bar-striped progress-bar-animated"
                         role="progressbar"
                         style="width: @GetProgressPercentage()%; background: linear-gradient(90deg, #89CFF0, #6A5ACD); transition: width 1s cubic-bezier(0.4, 0.0, 0.2, 1);"
                         aria-valuenow="@GetProgressPercentage()"
                         aria-valuemin="0"
                         aria-valuemax="100">
                        <span class="text-white font-weight-bold fs-5">@GetProgressPercentage()%</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@if (showAddPopup)
{
    <div class="modal show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.7); display: flex; justify-content: center; align-items: center;">
        <div class="modal-dialog modal-dialog-centered" role="document" style="max-width: 400px; border-radius: 15px; overflow: hidden;">
            <div class="modal-content" style="border-radius: 15px; box-shadow: 0px 4px 15px rgba(0, 0, 0, 0.2);">
                <div class="modal-header" style="background-color: #f8f9fa; border-bottom: 1px solid #dee2e6;">
                    <h5 class="modal-title" style="font-weight: bold; color: #343a40;">Add Calories</h5>
                    <button type="button" class="btn-close" @onclick="CloseAddPopup" aria-label="Close"></button>
                </div>
                <div class="modal-body" style="padding: 20px;">
                    <label for="mealSelection">Select a meal:</label>
                    <select id="mealSelection" class="form-control" @bind="selectedMealId">
                        <option value="">-- Choose a Meal --</option>
                        @foreach (var meal in Calories)
                        {
                            <option value="@meal.Id">@meal.Name (@meal.CaloriesCount calories)</option>
                        }
                    </select>
                </div>
                <div class="modal-footer" style="background-color: #f8f9fa; border-top: 1px solid #dee2e6; display: flex; justify-content: flex-end; gap: 10px;">
                    <button class="btn btn-success" @onclick="AddCalories" style="border-radius: 10px; font-weight: bold;">Add</button>
                    <button class="btn btn-secondary" @onclick="CloseAddPopup" style="border-radius: 10px; font-weight: bold;">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}

@if (showDeletePopup)
{
    <div class="modal show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.7); display: flex; justify-content: center; align-items: center;">
        <div class="modal-dialog modal-dialog-centered" role="document" style="max-width: 500px; border-radius: 15px; overflow: hidden;">
            <div class="modal-content" style="border-radius: 15px; box-shadow: 0px 4px 15px rgba(0, 0, 0, 0.2);">
                <div class="modal-header" style="background-color: #f8f9fa; border-bottom: 1px solid #dee2e6;">
                    <h5 class="modal-title" style="font-weight: bold; color: #343a40;">Delete Logged Calories</h5>
                    <button type="button" class="btn-close" @onclick="CloseDeletePopup" aria-label="Close"></button>
                </div>
                <div class="modal-body" style="padding: 20px;">
                    <ul style="list-style-type: none; padding: 0;">
                        @foreach (var meal in LoggedCalories)
                        {
                            <li style="display: flex; align-items: center; justify-content: space-between; background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 10px; padding: 10px; margin-bottom: 10px;">
                                <div style="display: flex; align-items: center;">
                                    <div style="width: 40px; height: 40px; background-color: #007bff; color: white; border-radius: 50%; display: flex; justify-content: center; align-items: center; font-weight: bold; margin-right: 15px;">
                                        @meal.MealName.Substring(0, 2).ToUpper()
                                    </div>
                                    <div>
                                        <p style="margin: 0; font-weight: bold;">@meal.MealName</p>
                                        <p style="margin: 0; font-size: 0.9rem; color: #6c757d;">@meal.CaloriesCount calories</p>
                                    </div>
                                </div>
                                <button class="btn btn-danger" style="display: flex; align-items: center; gap: 5px;" @onclick="() => PromptDeleteConfirmation(meal.Id)">
                                    <i class="bi bi-trash"></i>
                                    Delete
                                </button>
                            </li>
                        }
                    </ul>
                </div>
                <div class="modal-footer" style="background-color: #f8f9fa; border-top: 1px solid #dee2e6; padding: 15px;">
                    <button class="btn btn-secondary" @onclick="CloseDeletePopup" style="border-radius: 10px; font-weight: bold;">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@if (showConfirmDelete)
{
    <div class="modal show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.7); display: flex; justify-content: center; align-items: center;">
        <div class="modal-dialog modal-dialog-centered" role="document" style="max-width: 400px; border-radius: 15px; overflow: hidden;">
            <div class="modal-content" style="border-radius: 15px; box-shadow: 0px 4px 15px rgba(0, 0, 0, 0.2);">
                <div class="modal-header" style="background-color: #f8f9fa; border-bottom: 1px solid #dee2e6;">
                    <h5 class="modal-title" style="font-weight: bold; color: #343a40;">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="CloseConfirmDelete" aria-label="Close"></button>
                </div>
                <div class="modal-body" style="padding: 20px; text-align: center;">
                    <p style="font-size: 1rem; color: #6c757d;">Are you sure you want to delete this meal?</p>
                </div>
                <div class="modal-footer" style="background-color: #f8f9fa; border-top: 1px solid #dee2e6; display: flex; justify-content: space-around;">
                    <button class="btn btn-danger" @onclick="ConfirmDelete" style="border-radius: 10px; font-weight: bold;">Confirm</button>
                    <button class="btn btn-secondary" @onclick="CloseConfirmDelete" style="border-radius: 10px; font-weight: bold;">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}

@if (showTargetPopup)
{
    <div class="modal show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.7); display: flex; justify-content: center; align-items: center;">
        <div class="modal-dialog modal-dialog-centered" role="document" style="max-width: 400px; border-radius: 15px; overflow: hidden;">
            <div class="modal-content" style="border-radius: 15px; box-shadow: 0px 4px 15px rgba(0, 0, 0, 0.2);">
                <div class="modal-header" style="background-color: #f8f9fa; border-bottom: 1px solid #dee2e6;">
                    <h5 class="modal-title" style="font-weight: bold; color: #343a40;">Set Target Calories</h5>
                    <button type="button" class="btn-close" @onclick="CloseTargetPopup" aria-label="Close"></button>
                </div>
                <div class="modal-body" style="padding: 20px;">
                    <label for="popupTargetCalories">Target Calories:</label>
                    <input type="number" id="popupTargetCalories" class="form-control" @bind="targetCalories" />
                </div>
                <div class="modal-footer" style="background-color: #f8f9fa; border-top: 1px solid #dee2e6; display: flex; justify-content: flex-end; gap: 10px;">
                    <button class="btn btn-success" @onclick="CloseTargetPopup" style="border-radius: 10px; font-weight: bold;">Save</button>
                    <button class="btn btn-secondary" @onclick="CloseTargetPopup" style="border-radius: 10px; font-weight: bold;">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}

<style>
    /* Background:Black Gradient for a Healthy Look */
    body

    {
        background: url('https://dribbble.com/shots/16350482-Nutrition-illustrations/attachments/8825372?mode=media") no-repeat center center fixed; background-size: cover;
        font-family: 'Poppins', sans-serif;
        color: #5A4B3D;
    }




    /* Title Styling */
    h1 {
        text-align: center;
        font-size: 2rem;
        font-weight: bold;
        color: #5A4B3D;
        margin-top: 20px;
    }

    p[role="status"] {
        text-align: center;
        font-size: 1.2rem;
        font-weight: bold;
        color: #EDE9E3;
    }

    /* Button Styling */
    .btn {
        border-radius: 12px;
        font-size: 1rem;
        padding: 10px 18px;
        transition: 0.3s ease;
    }

        .btn:hover {
            opacity: 0.85;
            transform: scale(1.05);
        }

    .btn-primary {
        background-color: #5A4B3D;
        border: none;
    }

    .btn-danger {
        background-color: #d00000;
        border: none;
    }

    .btn-warning {
        background-color: #ffba08;
        border: none;
        color: black;
    }

    /* Calories Overview Card */
    .calories-card {
        background: white;
        padding: 20px;
        margin: 30px auto;
        max-width: 600px;
        border-radius: 15px;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        text-align: center;
    }

    /* Chart Container */
    .chart-container {
        display: flex;
        justify-content: center;
        padding: 15px;
        background: #f0fdf4;
        border-radius: 10px;
        box-shadow: inset 0px 3px 5px rgba(0, 0, 0, 0.1);
    }

    /* Progress Bar */
    body {
        background: linear-gradient(135deg, #d4f8e8, #b8e994);
        font-family: 'Poppins', sans-serif;
    }

    .btn {
        border-radius: 50px;
        font-size: 1.2rem;
        padding: 12px 24px;
        transition: all 0.3s ease;
    }

        .btn:hover {
            opacity: 0.85;
            transform: scale(1.05);
        }

    .progress-container {
        text-align: center;
        padding: 15px;
        border-radius: 20px;
        box-shadow: 0px 4px 8px rgba(255, 255, 255, 0.1);
    }

    .progress {
        height: 35px;
        border-radius: 25px;
        box-shadow: inset 0px 2px 4px rgba(255, 255, 255, 0.2);
    }

    .progress-bar {
        background: repeating-linear-gradient(45deg, #4caf50, #388e3c 10px, #2e7d32 10px, #1b5e20 20px) !important;
        transition: width 0.8s ease-in-out;
    }

        .progress-bar span {
            font-size: 1.2rem;
            font-weight: bold;
        }

    .card {
        border-radius: 15px;
        box-shadow: 0px 4px 10px rgba(255, 255, 255, 0.1);
    }
  
    /* Modal Enhancements */
    .modal-content {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(8px);
        border-radius: 15px;
        box-shadow: 0px 4px 15px rgba(0, 0, 0, 0.2);
    }

    .modal-header {
        background-color: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
        border-radius: 15px 15px 0 0;
    }

    .modal-footer {
        background-color: #f8f9fa;
        border-top: 1px solid #dee2e6;
        border-radius: 0 0 15px 15px;
    }

    /* Input Field Styling */
    .form-control {
        border-radius: 10px;
        border: 1px solid #b8e994;
        padding: 10px;
    }

    /* Delete List Styling */
    ul {
        list-style-type: none;
        padding: 0;
    }

    li {
        display: flex;
        align-items: center;
        justify-content: space-between;
        background: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 10px;
        padding: 10px;
        margin-bottom: 10px;
    }

    /* Meal Icon */
    .meal-icon {
        width: 40px;
        height: 40px;
        background-color: #52b788;
        color: white;
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
        font-weight: bold;
        margin-right: 15px;
    }
    
    /* Updated design using neutral, earthy tones */

    .scroll-panel {
        max-height: 200px; /* Adjust height as needed */
        overflow-y: auto;
        background: #EDE9E3; /* Light beige/cream background */
        padding: 15px;
        border-radius: 10px;
        margin-bottom: 15px;
        box-shadow: inset 0px 2px 5px rgba(0, 0, 0, 0.1);
    }

    .logged-food-list {
        list-style-type: none;
        padding: 0;
        margin: 0;
    }

    .logged-food-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px;
        border-bottom: 1px solid #B8A89A; /* Soft taupe divider */
        color: #6B5B4D; /* Warm brown text color */
    }

    .food-name {
        font-weight: bold;
        font-size: 1rem;
        color: #5A4B3D; /* Darker brown for text */
    }

    .food-calories {
        font-size: 0.9rem;
        color: #84776C; /* Muted grayish brown for subtle contrast */
    }

</style>

@code {
    private Project_Food_NutritionContext context = default!;
    private int totalCalories = 0;
    private bool showAddPopup = false; // New variable for the add calories pop-up
    private bool showDeletePopup = false;
    private bool showConfirmDelete = false;
    private bool showTargetPopup = false;
    private int? mealIdToDelete;
    private int? selectedMealId;
    private IList<Calorie> Calories;
    private List<LoggedCalorie> LoggedCalories = new List<LoggedCalorie>();
    private int targetCalories = 0;

    protected override async Task OnInitializedAsync()
    {
        // Initialize the DbContext
        context = DbFactory.CreateDbContext();
        Calories = await context.Calorie.ToListAsync();
        LoggedCalories = await context.LoggedCalories.ToListAsync();

        // Load saved progress from the database if available
        var savedProgress = await context.CalorieProgress.FirstOrDefaultAsync();
        if (savedProgress != null)
        {
            targetCalories = savedProgress.TargetCalories;
            totalCalories = savedProgress.TotalCalories;
        }
    }

    private void ShowInputField()
    {
        showAddPopup = true; // Open the pop-up
    }

    private void CloseAddPopup()
    {
        showAddPopup = false;
        selectedMealId = null; // Reset the selected meal
    }

    private void ShowTargetPopup()
    {
        showTargetPopup = true;
    }

    private void CloseTargetPopup()
    {
        showTargetPopup = false;

        // Save progress when the target calories are set
        SaveProgress();
    }

    private async Task AddCalories()
    {
        var selectedMeal = Calories.FirstOrDefault(m => m.Id == selectedMealId);
        if (selectedMeal != null)
        {
            totalCalories += selectedMeal.CaloriesCount ?? 0;

            var loggedCalorie = new LoggedCalorie
                {
                    MealId = selectedMeal.Id,
                    MealName = selectedMeal.Name,
                    CaloriesCount = selectedMeal.CaloriesCount
                };

            context.LoggedCalories.Add(loggedCalorie);
            await context.SaveChangesAsync();

            LoggedCalories.Add(loggedCalorie);

            // Save progress whenever calories are added
            SaveProgress();
        }

        selectedMealId = null;
        showAddPopup = false; // Close the pop-up
    }

    private void ShowDeletePopup()
    {
        showDeletePopup = true;
    }

    private void CloseDeletePopup()
    {
        showDeletePopup = false;
    }

    private void PromptDeleteConfirmation(int mealId)
    {
        mealIdToDelete = mealId;
        showConfirmDelete = true;
    }

    private void CloseConfirmDelete()
    {
        mealIdToDelete = null;
        showConfirmDelete = false;
    }

    private async Task ConfirmDelete()
    {
        if (mealIdToDelete.HasValue)
        {
            var loggedMeal = LoggedCalories.FirstOrDefault(m => m.Id == mealIdToDelete);
            if (loggedMeal != null)
            {
                totalCalories -= loggedMeal.CaloriesCount ?? 0;

                context.LoggedCalories.Remove(loggedMeal);
                await context.SaveChangesAsync();

                LoggedCalories.Remove(loggedMeal);

                // Save progress whenever a logged meal is deleted
                SaveProgress();
            }
        }

        mealIdToDelete = null;
        showConfirmDelete = false;
    }

    // Calculate percentage of calories consumed
    private int GetProgressPercentage()
    {
        if (targetCalories == 0) return 0;
        return (int)((double)totalCalories / targetCalories * 100);
    }

    // Save progress to the database
    private async Task SaveProgress()
    {
        var savedProgress = await context.CalorieProgress.FirstOrDefaultAsync();
        if (savedProgress != null)
        {
            savedProgress.TargetCalories = targetCalories;
            savedProgress.TotalCalories = totalCalories;
            savedProgress.LastUpdated = DateTime.Now;

            context.CalorieProgress.Update(savedProgress);
        }
        else
        {
            var newProgress = new CalorieProgress
                {
                    TargetCalories = targetCalories,
                    TotalCalories = totalCalories,
                    LastUpdated = DateTime.Now
                };

            context.CalorieProgress.Add(newProgress);
        }

        await context.SaveChangesAsync();
    }
}