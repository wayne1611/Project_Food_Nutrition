@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Project_Food_Nutrition.Data

@inject UserManager<Project_Food_NutritionUser> UserManager
@inject IUserStore<Project_Food_NutritionUser> UserStore
@inject SignInManager<Project_Food_NutritionUser> SignInManager
@inject IEmailSender<Project_Food_NutritionUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject RoleManager<IdentityRole> RoleManager

<PageTitle>Register</PageTitle>

<div class="register-container">
    <div class="register-box">
        <h1 class="text-center">Create an Account</h1>
        <p class="text-center">Join us and track your food nutrition efficiently!</p>
        <hr />

        <EditForm Model="Input" OnValidSubmit="RegisterUser">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="form-group">
                <label>Email</label>
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>

            <div class="form-group">
                <label>First Name</label>
                <InputText @bind-Value="Input.FirstName" class="form-control" autocomplete="firstname" aria-required="true" placeholder="John" />
                <ValidationMessage For="() => Input.FirstName" class="text-danger" />
            </div>

            <div class="form-group">
                <label>Last Name</label>
                <InputText @bind-Value="Input.LastName" class="form-control" autocomplete="lastname" aria-required="true" placeholder="Doe" />
                <ValidationMessage For="() => Input.LastName" class="text-danger" />
            </div>

            <div class="form-group">
                <label>Password</label>
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="********" />
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>

            <div class="form-group">
                <label>Confirm Password</label>
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="********" />
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-primary btn-block">Register</button>
        </EditForm>

        <div class="text-center mt-3">
            <p>Already have an account? <a href="/Account/Login" class="login-link">Login here</a></p>
        </div>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();
        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        user.FirstName = Input.FirstName;
        user.LastName = Input.LastName;
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        if (!await RoleManager.RoleExistsAsync("User"))
        {
            await RoleManager.CreateAsync(new IdentityRole("User"));
        }

        await UserManager.AddToRoleAsync(user, "User");
        await UserManager.AddClaimAsync(user, new System.Security.Claims.Claim("userId", user.Id));
        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private Project_Food_NutritionUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<Project_Food_NutritionUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(Project_Food_NutritionUser)}'. " +
                $"Ensure that '{nameof(Project_Food_NutritionUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<Project_Food_NutritionUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<Project_Food_NutritionUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [Required]
        [Display(Name = "First Name")]
        public string FirstName { get; set; } = "";

        [Required]
        [Display(Name = "Last Name")]
        public string LastName { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}

<style>
    .register-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background: linear-gradient(to right, #008080, #004d4d);
        padding: 20px;
    }

    .register-box {
        background: white;
        padding: 30px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 400px;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .btn-primary {
        width: 100%;
        background: #008080;
        border: none;
    }

        .btn-primary:hover {
            background: #005757;
        }

    .login-link {
        color: #008080;
        font-weight: bold;
    }

        .login-link:hover {
            color: #005757;
            text-decoration: underline;
        }

    hr {
        border-top: 2px solid #008080;
    }
</style>
